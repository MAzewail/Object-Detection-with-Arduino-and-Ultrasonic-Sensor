# -*- coding: utf-8 -*-
"""Another copy of Radar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yoZq5L1LiR-tnFYUmoBze3JXcRZRucle
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import SGDClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import KFold
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

"""# Binary Classification

40 sampels and 2 classes
"""

data = np.load('/content/Radar_Dataset_300sample_2classes.npy')

data.shape

df = pd.DataFrame(data)

df

df.describe()

for i in range(df.shape[0]//2):
  df.iloc[i,:].plot()
plt.figure()
for i in range(df.shape[0]//2,df.shape[0]):
  df.iloc[i,:].plot()

df['class'] = 0
df.iloc[(data.shape[0]//2):,-1] = 1
df['class']

df

x_train , y_train = df.iloc[:,:-1], df.iloc[:,-1]
x_train, x_test, y_train, y_test = train_test_split(x_train,y_train,test_size=0.3,shuffle=True)

scaler = StandardScaler()
scaler.fit(x_train)
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

x_test.shape

"""# Decsion tree"""

ens_class = DecisionTreeClassifier(max_depth=50, min_samples_leaf=5).fit(x_train,y_train)
ens_class = RandomForestClassifier(n_estimators=100, max_depth=80, min_samples_leaf=5).fit(x_train,y_train)

for i in range(y_test.shape[0]):
  print(ens_class.predict(x_test[i,:].reshape(1,-1)), y_test.iloc[i])

preds = ens_class.predict(x_test)

acc = []
for i in range(len(y_test)):
  x = 0 if preds[i] < 0.5 else 1
  if x != y_test.iloc[i]:
    acc.append(0)
  else:
    acc.append(1)
np.sum(acc)/len(acc)

!pip install micromlgen

from micromlgen import port

c_code = port(ens_class)
print(c_code)

